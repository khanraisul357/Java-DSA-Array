
	
	//In best case(Target is at mid index on first iteration) Time complexity = O(1) & In average/worst case Time complexity =  O(log n)
	public static void binarySearch(int[] arr,int target) {
		int start=0;
		int end=arr.length-1;
		int mid=0;
		boolean found=false;
		while(start<=end) {
		    mid=start+(end-start)/2;
			
			if(target<arr[mid]) {
				end=mid-1;
			}
			else if(target>arr[mid]) {
				start=mid+1;
			}
			else if(target==arr[mid]) {
				found=true;
				break;
			}
			
		}
		
		if(!found) {
			System.out.printf("Target Not Found!");
		}
		else {
			System.out.printf("Target %d Found!\nposition = %d\nindex = %d\n",target,mid+1,mid);
		}
		
	}
	
	
	
	public static void merge(int[] arr,int start,int mid,int end) {
		int i=start;
		int j=mid+1;
		int[] temp=new int[end-start+1];
		int k=0;
		
		while(i<=mid && j<=end) {
			if(arr[i]<=arr[j]) {
				temp[k]=arr[i];
				i++;
				k++;
			}
			else {
				temp[k]=arr[j];
				j++;
				k++;
			}
		}
		
		while(i<=mid) {
			temp[k]=arr[i];
			i++;
			k++;
			
		}
		while(j<=end) {
			temp[k]=arr[j];
			j++;
			k++;
		
		}
		
		for(int idx=0;idx<temp.length;idx++) {
			arr[start+idx]=temp[idx];
		}
		
	}
	
	public static void mergeSort(int[] arr,int start,int end) {
		if(start<end) {
			int mid=start+(end-start)/2;//(start+end)/2;
			mergeSort(arr,start,mid);
			mergeSort(arr,mid+1,end);
			merge(arr,start,mid,end);
		}
		
	
