package array_operations.insertion_operation;
import java.util.Scanner;


class InsertionAtEnd {
	
	public static boolean checkingOverflow(int[] arr,int currentSizeOfArray) {
		
		boolean isArrayFull=false;//Considering array is not full(i.e. number of elements not equal to array size)
			if(arr.length==currentSizeOfArray) {
				isArrayFull=true;
			}
		
		return isArrayFull;
	}
	
	
	//Insertion At Ending/last position/last index(Best Case) in an Array-------> Time Complexity = O(1)
	public static void insertAtEnd(int[] arr,int numberOfElement,int data) {
		
		int currentSizeOfArray=numberOfElement;
		
		if(checkingOverflow(arr,currentSizeOfArray)) {
			
			System.out.println("Cannot Insert, Overflow Condition!");
			
        }
		
		else {
			
	        arr[currentSizeOfArray]=data;
	        currentSizeOfArray++;
				
	        System.out.printf("Value = %d, Inserted  at (position = %d & index = %d).\n",data, currentSizeOfArray, currentSizeOfArray-1);
	        for(int i=0;i<currentSizeOfArray;i++) {
	            System.out.printf("arr[%d] = %d\n",i,arr[i]);
	        }
			
		}
        
	}
	
}


class InsertionAtSpecificPosition {
	
	public static boolean checkingOverflow(int[] arr,int currentSizeOfArray) {
		
		boolean isArrayFull=false;//Considering array is not full(i.e. number of elements not equal to array size)
			if(arr.length==currentSizeOfArray) {
				isArrayFull=true;
			}
		
		return isArrayFull;
		
	}
	
	
	//Insertion at any specific position(Average Case) in an Array-------> Time Complexity = O{n-(p-1) = O(n)
	public static void insertAtSpecificPosition(int[] arr,int numberOfElement,int position,int data) {
		
		int currentSizeOfArray=numberOfElement;
		
		if(checkingOverflow(arr,currentSizeOfArray)) {
			System.out.println("Cannot Insert, Overflow Condition!");
        }
		
		else if(position>numberOfElement+1) {
			System.out.println("Invalid Position! Cannot insert in position above " + (currentSizeOfArray + 1));
		}
		
		else if(position<1) {
			System.out.println("Invalid Position! Insertion can only be done when position>=1.");
		}
		
		else {
			
			for(int i=currentSizeOfArray-1;i>=position-1;i--) {
				arr[i+1]=arr[i];
			}
			
			arr[position-1]=data;
			currentSizeOfArray++;
			
			System.out.printf("Value = %d, Inserted  at (position = %d & index = %d).\n",data, position, position-1);
			for(int i=0;i<currentSizeOfArray;i++) {
				System.out.printf("arr[%d] = %d\n",i,arr[i]);
			}
			
		}
		
	}
	
}



 class InsertionAtStart {

	    //Insertion At Beginning/1st position/0th index(Worst Case) in an Sorted Array-------> Time Complexity = O(n)
	    public static void insertAtStart(int[] arr,int size,int data) {

			if(size>=arr.length) {
				System.out.println("Cannot Insert, Overflow Condition!");
			}
		
			for(int i=size-1;i>=1-1;i--) {//since inserting at position 1.
				arr[i+1]=arr[i];
			}
				
			arr[1-1]=data;
			size++;
				
			System.out.printf("Value = %d, Inserted  at (position = 1 & index = 0).\n",data);
			for(int i=0;i<size;i++) {
				System.out.printf("arr[%d] = %d\n",i,arr[i]);
			}
				
			
	     }
		
}



class InsertionInUnsortedArray {
	
	//Insertion in an Unsorted Array-------> Time Complexity O(1)
	public static void insertInUnsortedArray(int[] arr,int size,int data,int position) {
		
		if(size>=arr.length) {
			System.out.println("Cannot Insert, Overflow Condition!");
		}
						
		arr[size]=arr[position-1];
		arr[position-1]=data;
		size++;
						
		System.out.printf("Value = %d, Inserted  at (position = %d & index = %d).\n",data,position,position-1);
		for(int i=0;i<size;i++) {
			System.out.printf("arr[%d] = %d\n",i,arr[i]);
		}
				
	}
		
}



public class Main {
	
	public static void main(String[] args) {
		int[] array=new int[10];

		int tempArraySize=5;//indicating number of element present in the array before insertion.
		
		Scanner input=new Scanner(System.in);
		
		for(int i=0;i<tempArraySize;i++) {
			System.out.printf("arr[%d] = ",i);
			array[i]=input.nextInt();
		}
		
		System.out.println();
		System.out.println();
		
		InsertionAtEnd.insertAtEnd(array,tempArraySize,25);
		
		System.out.println();
		System.out.println();
		
		InsertionAtSpecificPosition.insertAtSpecificPosition(array,tempArraySize,7,3);
		
		System.out.println();
		System.out.println();
		
		InsertionAtStart.insertAtStart(array,tempArraySize,99);
		
		System.out.println();
		System.out.println();
		
		InsertionInUnsortedArray.insertInUnsortedArray(array,tempArraySize,52,3);
		
		input.close();
	}
	

}
